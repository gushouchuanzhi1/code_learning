多态 每一个对象都是一个态，同类型的对象能够表现出不同形态
例如：父类类型 对象名称=子类对象;
前提是有继承关系、有父类引用指向子类对象，并且需要有方法重写

变量调用：编译看左边，运行看左边
方法调用：编译看左边，运行看右边
方法调用的时候看左边的父类有没有对应的方法，没有的话就编译失败，运行需要运行子类方法，即子类需要方法重写
多态虽然可以方便使用来使用一些共有的方法，但是如果要是调用一些对象特有的方法，父类没有写会调取失败的

Animal a = new Dog(); =>> Dog d = Dog(a);新建一个对象将原来的多态对象强制转换成特定子类
上一步可以使用instanceof来判断该对象的类型



